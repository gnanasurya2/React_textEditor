{"version":3,"sources":["editor.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Title","h1","Button","button","Author","h3","Content","Editor","props","content","useRef","downloadRef","titleRef","authorRef","useEffect","document","execCommand","setHeader","id","com","val","current","focus","submit","dataExtractor","nodes","final","ele","console","log","childNodes","nodeName","push","type","localName","innerHTML","split","data","title","author","url","blob","Blob","JSON","stringify","fileName","join","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","href","URL","createObjectURL","download","click","ref","contentEditable","data-placeholder","onClick","style","display","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+5CAGA,IAAMA,EAAUC,IAAOC,IAAV,KAMPC,EAAQF,IAAOG,GAAV,KAWLC,EAASJ,IAAOK,OAAV,KAkBNC,EAASN,IAAOO,GAAV,KASNC,EAAUR,IAAOC,IAAV,KAiFEQ,EA1EA,SAACC,GACd,IAAMC,EAAUC,mBACVC,EAAcD,mBACdE,EAAWF,mBACXG,EAAYH,mBAClBI,qBAAU,WACRC,SAASC,YAAY,6BAA6B,EAAO,OACxD,IACH,IAIMC,EAAY,SAACC,GAJJ,IAACC,EAAKC,EAALD,EAKP,cALYC,EAKb,WAAoBF,GAJ1BH,SAASC,YAAYG,GAAK,EAAOC,GACjCX,EAAQY,QAAQC,SA0CZC,EAAS,YArCO,SAAhBC,EAAiBC,EAAOC,GAAW,IAAD,gBACtBD,GADsB,IACtC,2BAAuB,CAAC,IAAfE,EAAc,QAErB,GADAC,QAAQC,IAAIF,EAAIG,YACmB,OAA/BH,EAAIG,WAAW,GAAGC,SAEpB,YADAH,QAAQC,IAAIH,GAGuB,UAA/BC,EAAIG,WAAW,GAAGC,UACpBH,QAAQC,IAAIF,GACZD,EAAMM,KAAK,CACTC,KAAMN,EAAIO,UACVzB,QAASkB,EAAIQ,UAAUC,MAAM,QAAQ,MAGvCZ,EAAcG,EAAIG,WAAYJ,IAdE,8BAkBtC,IAAIW,EAAO,CACTC,MAAQ1B,EAASS,QAAQc,UACzBI,OAAQ1B,EAAUQ,QAAQc,UAC1BK,IAAI,GACJ/B,QAAQiB,GAEVE,QAAQC,IAAI,CAACQ,SACb,IAAII,EAAO,IAAIC,KAAK,CAACC,KAAKC,UAAUP,IAAO,CAACJ,KAAK,cACjDL,QAAQC,IAAIY,GACZ,IAAII,EAAWjC,EAASS,QAAQc,UAAUC,MAAM,KAAKU,KAAK,KAAK,QAC/D,GAAGC,OAAOC,UAAUC,iBAClBF,OAAOC,UAAUE,WAAWT,EAAKI,OAC5B,CACL,IAAIM,EAAOxC,EAAYU,QACvB8B,EAAKC,KAAOL,OAAOM,IAAIC,gBAAgBb,GACvCU,EAAKI,SAAWV,EAChBM,EAAKK,SAKPhC,CAAcf,EAAQY,QAAQS,WAAY,KAE5C,OACE,kBAACjC,EAAD,KACE,kBAACG,EAAD,CAAOkB,GAAG,QAAQuC,IAAK7C,EAAU8C,gBAAgB,OAAOC,mBAAiB,UACzE,kBAACvD,EAAD,CAAQsD,gBAAgB,OAAOD,IAAK5C,IACpC,kBAACX,EAAD,CAAQ0D,QAAS,kBAAM3C,EAAU,KAAjC,MACA,kBAACf,EAAD,CAAQ0D,QAAS,kBAAM3C,EAAU,KAAjC,MACA,kBAACf,EAAD,CAAQ0D,QAAS,kBAAM3C,EAAU,KAAjC,MACA,kBAACf,EAAD,CAAQ0D,QAAS,kBAAMrC,MAAvB,UACA,kBAACjB,EAAD,CACEoD,iBAAe,EACfC,mBAAiB,UACjBF,IAAKhD,IAEP,uBAAGgD,IAAK9C,EAAakD,MAAO,CAACC,QAAQ,YChH5BC,G,MARH,WACV,OACE,6BACE,kBAAC,EAAD,SCMcC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvD,SAASwD,eAAe,SDyHpB,kBAAmBvB,WACrBA,UAAUwB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.34ae0e6a.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100vw;\r\n  box-sizing: border-box;\r\n  min-height: 100vh;\r\n  padding: 60px 5% 2.5%;\r\n`;\r\nconst Title = styled.h1`\r\n  font-size: 44px;\r\n  line-height: 48px;\r\n  margin: 10px 0px;\r\n  &:empty:before {\r\n    content: attr(data-placeholder);\r\n    color: gray;\r\n  }\r\n  outline: none;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color:blue;\r\n  border:none;\r\n  margin-left:20px;\r\n  margin-top:30px;\r\n  margin-bottom:30px;\r\n  padding:8px 24px;\r\n  border-radius:12px;\r\n  color:white;\r\n  cursor:pointer;\r\n  transition:all 0.2s linear;\r\n  &:hover {\r\n    -webkit-box-shadow: 0 10px 6px -6px #777;\r\n    -moz-box-shadow: 0 10px 6px -6px #777;\r\n         box-shadow: 0 10px 6px -6px #777;\r\n  }\r\n\r\n`;\r\nconst Author = styled.h3`\r\n  font-size: 20px;\r\n  color: rgba(0, 0, 0, 0.7);\r\n  &:before {\r\n    content: \"Written by \";\r\n  }\r\n  outline: none;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  &:empty:before {\r\n    content: attr(data-placeholder);\r\n    color: gray;\r\n  }\r\n  outline: none;\r\n`;\r\nconst Editor = (props) => {\r\n  const content = useRef();\r\n  const downloadRef = useRef();\r\n  const titleRef = useRef();\r\n  const authorRef = useRef();\r\n  useEffect(() => {\r\n    document.execCommand(\"defaultParagraphSeparator\", false, \"p\");\r\n  }, []);\r\n  const format = (com, val) => {\r\n    document.execCommand(com, false, val);\r\n    content.current.focus();\r\n  };\r\n  const setHeader = (id) => {\r\n    format(\"formatblock\", `h${id}`);\r\n  };\r\n  const dataExtractor = (nodes, final) => {\r\n    for (let ele of nodes) {\r\n      console.log(ele.childNodes);\r\n      if (ele.childNodes[0].nodeName === \"BR\") {\r\n        console.log(final);\r\n        return;\r\n      } else {\r\n        if (ele.childNodes[0].nodeName === \"#text\") {\r\n          console.log(ele);\r\n          final.push({\r\n            type: ele.localName,\r\n            content: ele.innerHTML.split(\"<br>\")[0],\r\n          });\r\n        } else {\r\n          dataExtractor(ele.childNodes, final);\r\n        }\r\n      }\r\n    }\r\n    let data = {\r\n      title : titleRef.current.innerHTML,\r\n      author: authorRef.current.innerHTML,\r\n      url:\"\",\r\n      content:final\r\n    }\r\n    console.log({data});\r\n    var blob = new Blob([JSON.stringify(data)],{type:\"text/json\"});\r\n    console.log(blob);\r\n    var fileName = titleRef.current.innerHTML.split(\" \").join(\"_\")+\".json\";\r\n    if(window.navigator.msSaveOrOpenBlob) {\r\n      window.navigator.msSaveBlob(blob,fileName);\r\n    } else {\r\n      var elem = downloadRef.current;\r\n      elem.href = window.URL.createObjectURL(blob);\r\n      elem.download = fileName;        \r\n      elem.click();        \r\n    }\r\n  };\r\n  const submit = () => {\r\n    \r\n    dataExtractor(content.current.childNodes, []);\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Title id=\"title\" ref={titleRef} contentEditable=\"true\" data-placeholder=\"Title\" ></Title>\r\n      <Author contentEditable=\"true\" ref={authorRef}></Author>\r\n      <Button onClick={() => setHeader(2)}>h2</Button>\r\n      <Button onClick={() => setHeader(3)}>h3</Button>\r\n      <Button onClick={() => setHeader(4)}>h4</Button>\r\n      <Button onClick={() => submit()}>Submit</Button>\r\n      <Content\r\n        contentEditable\r\n        data-placeholder=\"Content\"\r\n        ref={content}\r\n      ></Content>\r\n      <a ref={downloadRef} style={{display:\"none\"}}></a>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport Editor from \"./editor\";\r\nimport \"./App.css\";\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Editor />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}